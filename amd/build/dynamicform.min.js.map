{"version":3,"file":"dynamicform.min.js","sources":["../src/dynamicform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Dyanamic from for submitting when user not logged in\n *\n * @module block_timezoneclock/main\n * @copyright 2024 Harshil Patel <harshil8595@gmail.com>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport DynamicForm from 'core_form/dynamicform';\nimport Ajax from 'core/ajax';\nimport Fragment from 'core/fragment';\n\nexport class BlockTimezoneclockDynamicForm extends DynamicForm {\n\n    /**\n     * Ajax service method to call from non login url\n     *\n     * @var {String}\n     */\n    static ajaxCallMethod = 'block_timezoneclock_dynamic_form';\n\n    /**\n     * Capture user loggedin or not\n     */\n    static userLogginIn;\n\n    /**\n     * Checks user loggedin or not\n     *\n     * @return {Boolean}\n     */\n    get isUserLogginIn() {\n        if (typeof BlockTimezoneclockDynamicForm.userLogginIn === 'undefined') {\n            BlockTimezoneclockDynamicForm.userLogginIn = !!this.container.getAttribute('data-user-loggedin');\n        }\n        return BlockTimezoneclockDynamicForm.userLogginIn;\n    }\n\n    /**\n     * Get form body\n     *\n     * @param {String} formDataString form data in format of a query string\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        return Ajax.call([{\n            methodname: BlockTimezoneclockDynamicForm.ajaxCallMethod,\n            args: {\n                formdata: formDataString,\n                form: this.formClass,\n            }\n        }], true, this.isUserLogginIn)[0]\n        .then(response => {\n            return {...response, js: Fragment.processCollectedJavascript(response.javascript)};\n        });\n    }\n\n    /**\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\n     *\n     * @param {Object} additionalFormData Additional Form Data to pass\n     */\n    async submitFormAjax(additionalFormData = {}) {\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!(await this.validateElements())) {\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const form = this.container.querySelector('form');\n        const formData = new URLSearchParams([...(new FormData(form)).entries(), ...Object.entries(additionalFormData)]);\n\n        // Now we can continue...\n        this.getBody(formData.toString()).then((response) => {\n            if (!response.submitted) {\n                // Form was not submitted, it could be either because validation failed or because no-submit button was pressed.\n                this.updateForm(response);\n                this.enableButtons();\n                this.trigger(this.events.SERVER_VALIDATION_ERROR, null, false);\n            } else {\n                // Form was submitted properly.\n                const data = JSON.parse(response.data);\n                this.enableButtons();\n                this.notifyResetFormChanges();\n                this.onSubmitSuccess(data);\n            }\n            return null;\n        })\n        .catch(exception => this.onSubmitError(exception));\n    }\n}\n"],"names":["BlockTimezoneclockDynamicForm","DynamicForm","isUserLogginIn","userLogginIn","this","container","getAttribute","getBody","formDataString","Ajax","call","methodname","ajaxCallMethod","args","formdata","form","formClass","then","response","js","Fragment","processCollectedJavascript","javascript","additionalFormData","validateElements","trigger","events","CLIENT_VALIDATION_ERROR","disableButtons","querySelector","formData","URLSearchParams","FormData","entries","Object","toString","submitted","data","JSON","parse","enableButtons","notifyResetFormChanges","onSubmitSuccess","updateForm","SERVER_VALIDATION_ERROR","catch","exception","onSubmitError"],"mappings":"8nBA4BaA,sCAAsCC,qBAmB3CC,iCAC0D,IAA/CF,8BAA8BG,eACrCH,8BAA8BG,eAAiBC,KAAKC,UAAUC,aAAa,uBAExEN,8BAA8BG,aAUzCI,QAAQC,uBACGC,cAAKC,KAAK,CAAC,CACdC,WAAYX,8BAA8BY,eAC1CC,KAAM,CACFC,SAAUN,eACVO,KAAMX,KAAKY,cAEf,EAAMZ,KAAKF,gBAAgB,GAC9Be,MAAKC,WACK,IAAIA,SAAUC,GAAIC,kBAASC,2BAA2BH,SAASI,2CASzDC,0EAAqB,aAE1BnB,KAAKoB,oCACRC,QAAQrB,KAAKsB,OAAOC,wBAAyB,MAAM,QAGvDC,uBAGCb,KAAOX,KAAKC,UAAUwB,cAAc,QACpCC,SAAW,IAAIC,gBAAgB,IAAK,IAAIC,SAASjB,MAAOkB,aAAcC,OAAOD,QAAQV,2BAGtFhB,QAAQuB,SAASK,YAAYlB,MAAMC,cAC/BA,SAASkB,UAKP,OAEGC,KAAOC,KAAKC,MAAMrB,SAASmB,WAC5BG,qBACAC,8BACAC,gBAAgBL,gBARhBM,WAAWzB,eACXsB,qBACAf,QAAQrB,KAAKsB,OAAOkB,wBAAyB,MAAM,UAQrD,QAEVC,OAAMC,WAAa1C,KAAK2C,cAAcD,mGA/ElC9C,+CAOe,oDAPfA"}