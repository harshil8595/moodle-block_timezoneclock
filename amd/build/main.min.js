define("block_timezoneclock/main",["exports","core_form/dynamicform","core/templates"],(function(_exports,_dynamicform,_templates){var obj;
/**
   * Main js functions for block_timezoneclock
   *
   * @module block_timezoneclock/main
   * @copyright 2022 Harshil Patel <harshil8595@gmail.com>
   * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.registerForm=_exports.initBlock=void 0,_dynamicform=(obj=_dynamicform)&&obj.__esModule?obj:{default:obj};const dtOptions={year:"numeric",month:"short",weekday:"short",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric",hour12:!0},getDateInfo=function(timeZone){let timestamp=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Date,customdateOptions=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};customdateOptions={...dtOptions,...customdateOptions,timeZone:timeZone};const t1=new Intl.DateTimeFormat("en-us",customdateOptions),dateInfo=t1.formatToParts(timestamp).reduce(((a,i)=>({...a,[i.type]:i.value})),{});return{...dateInfo,day:dateInfo.day.padStart(2,0)}},updateTime=()=>document.querySelectorAll('[data-region="clock"]:not([data-autoupdate="false"])').forEach((clock=>{const datefractions=getDateInfo(clock.dataset.timezone);clock.querySelectorAll("[data-fraction]").forEach((sp=>{const{fraction:fraction,unit:unit}=sp.dataset;(null==unit?void 0:unit.toString())!==datefractions[fraction].toString()&&(sp.style.setProperty("--unit",datefractions[fraction]),sp.setAttribute("data-unit",datefractions[fraction]),sp.firstElementChild.innerText=datefractions[fraction].toString())}))}));_exports.initBlock=()=>{setInterval(updateTime,1e3)};_exports.registerForm=formUniqId=>{const form=document.getElementById(formUniqId),r=new RegExp("(day|month|year|hour|minute)");if(form){const dForm=new _dynamicform.default(form,form.dataset.formClass),getTypeFromElement=sel=>sel.name.match(r).pop(),generateTimeStamp=()=>{const timestampInput=dForm.getFormNode().elements.timestamp,timezoneSelection=dForm.getFormNode().elements.timezone,fractions=[...dForm.getFormNode().querySelector('[data-fieldtype="date_time_selector"]').querySelectorAll("select")].reduce(((acc,sel)=>({...acc,[getTypeFromElement(sel)]:sel.value.padStart(2,0)})),{}),{year:year,month:month,day:day,hour:hour,minute:minute}=fractions,date=new Date("".concat(year,"-").concat(month,"-").concat(day,"T").concat(hour,":").concat(minute,":00.000")),gmtOffset=getDateInfo(timezoneSelection.value,date,{timeZoneName:"longOffset"}).timeZoneName.split("GMT").pop(),d=new Date(date+gmtOffset);timestampInput.value=Math.round(d.valueOf()/1e3)};dForm.load({instanceid:form.closest("[data-instance-id]").getAttribute("data-instance-id")}),dForm.addEventListener(dForm.events.FORM_SUBMITTED,(e=>{e.preventDefault(),(0,_templates.replaceNodeContents)(form.nextElementSibling,e.detail.html,e.detail.js)})),dForm.addEventListener("change",(e=>{const dateTimeNode=e.target.closest('[data-fieldtype="date_time_selector"]'),timezoneSelection=e.target.closest('[name="timezone"]');(dateTimeNode||timezoneSelection)&&generateTimeStamp()})),dForm.addEventListener("change",(e=>{const timestampInput=e.target.closest('[name="timestamp"]'),timezoneSelection=dForm.getFormNode().elements.timezone,dateTimeNode=dForm.getFormNode().querySelector('[data-fieldtype="date_time_selector"]');if(timestampInput){const d=new Date(0);d.setUTCSeconds(timestampInput.value);const info=getDateInfo(timezoneSelection.value,d,{month:"numeric",hour12:!1});dateTimeNode.querySelectorAll("select").forEach((sel=>{sel.value=info[getTypeFromElement(sel)]}))}}))}}}));

//# sourceMappingURL=main.min.js.map